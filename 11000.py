# [1,3][2,4][3,5] -> 일단 시작 순서대로 정렬. 느슨하게든/완전하게든.
# 왼쪽부터 빼내야 하고, 정렬이 필요하기 때문에 heapq를 써야겠다?
# [S,T] [S,T]
#  i      j
# max 강의실 = 0
# 아무도 수업 안하는 중 -> 가장 빠른 수업 = 1시부터 3시까지
# 지금 수업하고 있는 곳 = [1시부터 3시까지]
# 다른 강의실을 써야 하는 곳 = 시작 시간이 힙의 첫번째 종료 시간 이전이라면(3시X) [2시부터 4시까지]
# -> 그러면 현재 강의실은 [[1시부터 3시까지], [1시부터 5시까지]] -> 종료 시간이 작은 순서대로 넣어봄 (최소힙)
# 왜냐면 수업이 빨리 끝나는 순서대로 강의실 물려받아야 함
# [2시부터 4시까지] 첫번째 수업은 겹침 -> 첫번째만 비교하면 되는가? -> 예스. 빨리 끝나는 순이니까.
# 그럼 겹치면 넣어야겠지?
# -> [[1시부터 3시까지], [2시부터 4시까지], [1시부터 5시까지]]
# [1시부터 2시까지 수업은] 
# -> 남아있는 강의실로 못함. 강의실 +1
# [[1시부터 2시까지], [1시부터 3시까지], [2시부터 4시까지], [1시부터 5시까지]]
# [3시부터 5시 수업은]
# -> 가능함. 근데 이제 불필요한 강의실들은 빼야함.
# -> 종료 시간이 현재 시작 시간보다 작거나 같은 것들은 다 빠져도 됨.
#  결과(본인 수업 넣기) -> [[2시부터 4시까지], [1시부터 5시까지], [3시부터 5시까지]]
# [7시부터 10시 수업은] -> 가능함. 다 빼야함.
# []
# [8시부터 9시 수업은] -> 

# [1,2] [1,3] [1,5] [2,4], [3,5]
# 최대 1 강의실 [(2, [1,2])]
# 최대 2 강의실 [(2, [1,2]), (3, [1,3])]
# 최대 3 강의실 [(2, [1,2]), (3, [1,3]), (5, [1,5])]
# 최대 3 강의실 [ (빠짐), (3, [1,3]), (5, [1,5])] -> [(3, [1,3]), (4, [2,4]), (5, [1,5])]
# 최대 ? 강의실 []


import sys
from heapq import heappop, heappush

input = sys.stdin.readline

n = int(input().rstrip())
classes = []
rooms = []
max_room = 1

for _ in range(n):
    class_time = list(map(int, input().rstrip().split()))
    heappush(classes, class_time)

while classes:
    if rooms and classes[0][0] >= rooms[0][0]:
        # print("A. 강의실을 추가로 쓸 필요 없음.", rooms, classes[0])
        while rooms and classes[0][0] >= rooms[0][0]:
            heappop(rooms)
        # print("A-after. 끝난 강의 다 뺌.", rooms)
    else:
        s,t = heappop(classes)
        # print("B. 쓸 강의실이 없어서 넣습니다.", (s,t), rooms)

        heappush(rooms, (t, (s,t)))

        # print("B-after. 강의실 추가 후.", rooms)

        if max_room < len(rooms):
            # print("C. 최대 강의실 갱신", max_room, len(rooms))
            max_room = len(rooms)

print(max_room)